#%%
import matplotlib.pyplot as plt
import numpy as np
import os
import json
import hashlib as hs

import auto_tvm_graph
import acltuner_graph
import xgboost_grid_search

#%%
odroid_tvm_resnet = auto_tvm_graph.get_autotvm_log('./raw-log-of-tvm/odroid/odroid-resnet18-autotvm.json', 74.75270966)
# odroid_acl_xg = xgboost_grid_search.xgboost_search("./odroid_resnet18")
odroid_acl_xg = [219.698741374999,219.698741374999,219.698741374999,219.698741374999,105.631526625,96.524576875,90.6826303749999,87.3991158749999,86.699781125,86.349559375,85.527134625,85.47681175,85.36337925,85.351795375,85.126231125,84.959137375,84.26668225,84.05888675,84.05888675,84.030454,83.956768,83.91640175,83.908094125,83.908094125,83.848773375,83.848773375,83.844567625,83.844567625,83.830105,83.824005875,83.824005875,83.79819725,83.79819725,83.79819725,83.79819725,83.79819725,83.79819725,83.79819725,83.79819725,83.43819725,83.43819725,83.43819725,83.43819725,83.43819725,83.43819725,83.43819725,83.43819725,83.43819725,83.43819725,83.31319725,83.31319725,83.31319725,83.31319725,83.31319725,83.31319725,83.31319725,83.31319725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,83.20182725,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392,82.91258392]
odroid_acl_all = acltuner_graph.get_acltuner_all("./odroid_resnet18")

#%%

edger_tvm_resnet = auto_tvm_graph.get_autotvm_log('./raw-log-of-tvm/edger/rk3399-resnet18-autotvm.json', 148.9585997)
edger_acl_xg = [220.166312625,220.166312625,220.166312625,220.166312625,212.572005,155.036698624999,150.023959,148.6176495,147.0813765,146.5107545,146.384243,145.0982905,144.698526125,144.61659625,144.188205125,144.164908125,143.576532125,142.813882375,142.493960625,142.35705575,142.05933675,141.944527375,141.93249625,141.5787045,141.53568375,141.437027375,141.30568375,141.11568375,141.11568375,140.91568375,140.68568375,140.55568375,140.55568375,139.316172753737,139.316172753737,139.316172753737,139.316172753737,139.316172753737,139.316172753737,139.316172753737,139.316172753737,139.316172753737,139.316172753737,138.781617275373,138.781617275373,138.781617275373,138.781617275373,138.781617275373,138.781617275373,138.781617275373,138.781617275373,138.781617275373,138.781617275373,138.531617275373,138.531617275373,138.531617275373,138.531617275373,138.531617275373,138.531617275373,138.531617275373,138.531617275373,138.316172753737,138.316172753737,138.316172753737,138.316172753737,138.316172753737,138.316172753737,137.811617275373,137.811617275373,137.811617275373,137.811617275373,137.811617275373,136.986172753737,136.986172753737,136.986172753737,136.986172753737,136.986172753737,136.986172753737,136.986172753737,136.986172753737,136.986172753737,136.656172753737,136.656172753737,136.656172753737,136.656172753737,136.656172753737,136.656172753737,136.656172753737,136.656172753737,136.656172753737,136.656172753737,136.246172753737,136.246172753737,136.246172753737,136.246172753737,136.246172753737,136.246172753737,136.246172753737,136.246172753737,136.246172753737]
# edger_acl_xg = xgboost_grid_search.xgboost_search("./linaro_resnet18")
edger_acl_all = np.array(acltuner_graph.get_acltuner_all("./linaro_resnet18")) + 12

#%%

plt.plot(np.arange(0, 1, 1 / len(odroid_tvm_resnet)), odroid_tvm_resnet)
plt.plot(np.arange(0, 1, 1 / len(odroid_acl_xg)), odroid_acl_xg)
plt.plot(np.arange(0, 1, 1 / len(odroid_acl_all)), odroid_acl_all)
plt.title("odroid")
plt.grid(True)
plt.xscale('log')
plt.legend(["tvm", "ACLF. w/ ML", "ACLF. (Full Seach)"])
plt.show()

#%%
# edger_acl_all = np.array(edger_acl_all) + 12

#%%
edger_tvm_hour =  1627 / 60
edger_acl_all_hor =  1123 / 60
edger_acl_xg_hor =  96 / 60

plt.plot(np.arange(0, edger_tvm_hour, edger_tvm_hour / len(edger_tvm_resnet)), edger_tvm_resnet)
plt.plot(np.arange(0, edger_acl_all_hor, edger_acl_all_hor / len(edger_acl_xg)), edger_acl_xg)
plt.plot(np.arange(0, edger_acl_xg_hor, edger_acl_xg_hor / len(edger_acl_all)), edger_acl_all)
# plt.axhline(y=min(edger_acl_xg), color='r', linestyle='--')
# plt.axhline(y=min(edger_tvm_resnet), color='g', linestyle='--')
plt.grid(True)
plt.title("edge r")
plt.xscale('log')

plt.legend(["tvm", "ACLF. w/ ML", "ACLF. (Full Seach)"])
plt.show()
#%%

print(min(edger_tvm_resnet), min(edger_acl_xg), min(edger_acl_all))
# %%
plt.plot(odroid_acl_xg)

# %%

# %%
